var _window =
  typeof window !== 'undefined'
    ? window
    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var utils = {
    		isFunction:function (what) {return typeof what === 'function';},
    		isUndefined:function (what) { return what === void 0;},
    		hasKey:function (object, key) { return Object.prototype.hasOwnProperty.call(object, key);},
    		each:function (obj, callback) {
    		    var i, j;
    		    if (this.isUndefined(obj.length)) {
    		      for (i in obj) {
    		        if (this.hasKey(obj, i)) {
    		          callback.call(null, i, obj[i]);
    		        }
    		      }
    		    } else {
    		      j = obj.length;
    		      if (j) {
    		        for (i = 0; i < j; i++) {
    		          callback.call(null, i, obj[i]);
    		        }
    		      }
    		    }
    		},
    		objectMerge:function (obj1, obj2) {
    		    if (!obj2) {
    		        return obj1;
    		    }
    		    this.each(obj2, function(key, value) {
    		        obj1[key] = value;
    		    });
    		    return obj1;
    		},
    		handleWindowError : function (_window, config) {
    		    _oldWindowError = _window.onerror;
    		    _window.onerror = function (msg, url, line, col, error) {
    		        if (error && error.stack) {
    		            config.sendError({
    						  pId:config.pId,
    		                title: msg,
    		                msg: error.stack,
    		                category: 'js',
    		                level: 'error'
    		            });
    		        } else if (typeof msg === 'string') {
    		            config.sendError({
    						   pId:config.pId,
    		                title: msg,
    		                msg: JSON.stringify({
    		                    resourceUrl: url,
    		                    rowNum: line,
    		                    colNum: col
    		                }),
    		                category: 'js',
    		                level: 'error'
    		            });
    		        }
    		        if (_oldWindowError && isFunction(_oldWindowError)) {
    		            windowError && windowError.apply(window, arguments);
    		        }
    		    }
    		    
    		},
    		handleResourceError : function (_window, config) {
    		    _window.addEventListener('error', function (event) {
    		        if (event) {
    		            var target = event.target || event.srcElement;
    		            var isElementTarget = target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;
    		            if (!isElementTarget) return; // js error不再处理
    		            
    		            var url = target.src || target.href;
    		            config.sendError({
    						   pId:config.pId,
    		                title: target.nodeName,
    		                msg: url,
    		                category: 'resource',
    		                level: 'error'
    		            });
    		        }
    		    }, true);
    		},
    		handleAjaxError : function (_window, config) {
    		    var protocol = _window.location.protocol;
    		    if (protocol === 'file:') return;

    		    // 处理fetch
    		    this._handleFetchError(_window, config);

    		    // 处理XMLHttpRequest
    		    if (!_window.XMLHttpRequest) {
    		        return;   
    		    } 
    		    var xmlhttp = _window.XMLHttpRequest;
    		    
    		    var _oldSend = xmlhttp.prototype.send;
    		    var _handleEvent = function (event) {
    		        if (event && event.currentTarget && event.currentTarget.status !== 200) {
    		            config.sendError({
    						   pId:config.pId,
    		                title: event.target.statusText,
    		                msg: JSON.stringify({
    		                    //response: event.target.response,
    		                    responseURL:  encodeURIComponent(event.target.responseURL),
    		                    status: event.target.status
    		                    //statusText: event.target.statusText
    		                }),
    		                category: 'ajax',
    		                level: 'error'
    		            });
    		        }
    		    }
    		    xmlhttp.prototype.send = function () {
    		        if (this['addEventListener']) {
    		            this['addEventListener']('error', _handleEvent);
    		            this['addEventListener']('load', _handleEvent);
    		            this['addEventListener']('abort', _handleEvent);
    		        } else {
    		            var _oldStateChange = this['onreadystatechange'];
    		            this['onreadystatechange'] = function (event) {
    		                if (this.readyState === 4) {
    		                    _handleEvent(event);
    		                }
    		                _oldStateChange && _oldStateChange.apply(this, arguments);
    		            };
    		        }
    		        return _oldSend.apply(this, arguments);
    		    }
    		},
    		handleConsoleError : function (_window, config) {
    		    if (!_window.console || !_window.console.error) return;

    		    var _oldConsoleError = _window.console.error;
    		    _window.console.error = function () {
    		        config.sendError({
    					 pId:config.pId,
    		            title: 'consoleError',
    		            msg: JSON.stringify(arguments[0]),
    		            category: 'js',
    		            level: 'error'
    		        });
    		        _oldConsoleError && _oldConsoleError.apply(_window, arguments);
    		    };
    		},
    		_handleFetchError : function (_window, config) {
    		    if(!_window.fetch) return;
    		    let _oldFetch = _window.fetch;
    		    _window.fetch = function () {
    		        return _oldFetch.apply(this, arguments)
    		        .then(res => {
    		            if (!res.ok) { // True if status is HTTP 2xx
    		                config.sendError({
    						       pId:config.pId,
    		                    title: arguments[0],
    		                    msg: JSON.stringify(res),
    		                    category: 'ajax',
    		                    level: 'error'
    		                });
    		            }
    		            return res;
    		        }).catch(error => {
    		            config.sendError({
    						   pId:config.pId,
    		                title: arguments[0],
    		                msg: JSON.stringify({
    		                    message: error.message,
    		                    stack: error.stack
    		                }),
    		                category: 'ajax',
    		                level: 'error'
    		            });
    		            throw error;  
    		        })
    		    }
    		}
    }
    
var frontMonitorJs = _window.frontMonitorJs;
if (!frontMonitorJs) {
    var frontMonitorJs = function () {};
    var frontMonitorJs = new frontMonitorJs();
    frontMonitorJs.init = function (options) {
        var defaultConfig = {
            jsError: true,
            resourceError: true,
            ajaxError: true,
            consoleError: false, // console.error默认不处理
            scriptError: false, // 跨域js错误，默认不处理，因为没有任何信息
            vue: false,
            autoReport: true,
            filters: [], // 过滤器，命中的不上报
            levels: ['info', 'warning', 'error'],
            category: ['js', 'resource', 'ajax']
        }
        var config = utils.objectMerge(defaultConfig, options);

        if (!config.scriptError) {
            config.filters.push(function () {return /^Script error\.?$/.test(arguments[0]);})
        }

        // 处理过滤器
        var _oldSendError = config.sendError;
        config.sendError = function (title, msg, level, category, tags) {
            try {
                var isFilter = config.filters.some(func => {
                    return utils.isFunction(func) && func.apply(this, arguments);
                })
                if (isFilter) {return}
                _oldSendError.apply(this, arguments);
                if (config.autoReport) {return}
                // TODO ajax上报
            }
            catch (e) {
                _oldSendError({
                    title: 'frontMonitorJs',
                    msg: e,
                    category: 'js'
                })
            }
        }
        var _window = typeof window !== 'undefined' ? window
        : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
        var addEventListener = _window.addEventListener || _window.attachEvent;
        if (config.jsError) {
            utils.handleWindowError(_window, config);
        }
        if (config.resourceError && addEventListener) {
            utils.handleResourceError(_window, config);
        }
        if (config.ajaxError) {
            utils.handleAjaxError(_window, config);
        }
        if (config.consoleError) {
            utils.handleConsoleError(_window, config);
        }
    }
}
var Ajax={
		  ajax:function(opts){
			  var xhr = new XMLHttpRequest();
			  xhr.onreadystatechange = function() {
			      // readyState == 4说明请求已完成
			      if (xhr.readyState == 4 && xhr.status == 200 || xhr.status == 304) { 
			        // 从服务器获得数据 
			    	  opts.success(JSON.parse(xhr.responseText));  
			      }else if (xhr.readyState == 4 && xhr.status !== 200){
			    	  opts.error();
			      }
			    };
			    var urlStr = '';
			    for(var key in opts.data){
			    	urlStr += key + '='+ opts.data[key] + '&';
			    }
			    urlStr = urlStr.substring(0,urlStr.length-1);
			    if(opts.type.toLowerCase() === 'get'){
			    	xhr.open(opts.type,opts.url + '?' + urlStr,true);
			    	xhr.send();
			    }
			    if(opts.type.toLowerCase() === 'post'){
			    	xhr.open(opts.type,opts.url,true);
			    	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); 
			    	xhr.send(urlStr);
			    }
		  }
		}
_window.frontMonitorJs = frontMonitorJs;

var flag = true;
window.frontMonitorJs.init({
	    pId:window.location.href.indexOf("?") > -1?encodeURIComponent(window.location.href.substr(0,window.location.href.indexOf("?"))):encodeURIComponent(window.location.href),
	    autoReport: true,
        sendError: function (error) {
        	 //console.log(error.msg);
        	if(flag){
        		Ajax.ajax({
					 type: "POST",
					 url: "http://retcode.99114.com/frontMonitorServlet",
					 data: {pId:error.pId,title:error.title,msg:error.msg,category:error.category,level:error.level},
					 dataType: "json",
					 success: function(data){
						 if(!data.flag)
							 flag = false;
					 },
					 error: function () {
						flag = false;
					 }
				 });
        	}else{
        		return;
        	}
        }
    });
